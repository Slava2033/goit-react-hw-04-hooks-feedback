{"version":3,"sources":["components/Section/section.js","components/Notification/notification.js","components/Statistics/statistics.js","components/FeedbackOptions/feedbackOptions.js","App.js","reportWebVitals.js","index.js","components/Statistics/statistics.module.css","components/FeedbackOptions/feedbackOptions.module.css"],"names":["Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positiveFeedbackPercentage","className","s","box","options","FeedbackOptions","onLeaveFeedback","map","option","button","type","data-feedback","onClick","App","useState","goodFeedback","setGoodFeedback","neutralFeedback","setNeutralFeedback","badFeedback","setBadFeedback","countTotalFeedback","target","dataset","feedback","prevState","totalFeedback","Math","round","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+OAceA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,M,gBCHU,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICCb,IAgCeC,EAhCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,2BALiB,OAOjB,mCACGD,EACC,qBAAIE,UAAWC,IAAEC,IAAjB,UACE,qBAAIF,UAAWC,IAAEE,QAAjB,mBAAiCR,EAAjC,OACA,qBAAIK,UAAWC,IAAEE,QAAjB,sBAAoCP,EAApC,OACA,qBAAII,UAAWC,IAAEE,QAAjB,kBAAgCN,EAAhC,OACA,qBAAIG,UAAWC,IAAEE,QAAjB,oBAAkCL,EAAlC,OACA,qBAAIE,UAAWC,IAAEE,QAAjB,gCACsBJ,EADtB,UAKF,cAACP,EAAD,CAAcC,QAAQ,yB,gBCEbW,EArBS,SAAC,GAAD,IAAGD,EAAH,EAAGA,QAASE,EAAZ,EAAYA,gBAAZ,OACtB,qBAAKL,UAAWC,IAAEE,QAAlB,SACGA,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEP,UAAWC,IAAEO,OACbC,KAAK,SACLC,gBAAeH,EACfI,QAASN,EAJX,SAOGE,GAFIA,SCPPJ,EAAU,CAAC,OAAQ,MAAO,WAEjB,SAASS,IAAO,IAAD,EACYC,mBAAS,GADrB,mBACrBC,EADqB,KACPC,EADO,OAEkBF,mBAAS,GAF3B,mBAErBG,EAFqB,KAEJC,EAFI,OAGUJ,mBAAS,GAHnB,mBAGrBK,EAHqB,KAGRC,EAHQ,KAKtBC,EAAqB,WACzB,OAAON,EAAeI,EAAcF,GA6BtC,OACE,qCACE,cAAC,EAAD,CAAS1B,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBa,QAASA,EAASE,gBAxBlB,SAAC,GAGtB,OAHqC,EAAbgB,OACIC,QAApBC,UAGN,IAAK,OACHR,GAAgB,SAAAS,GAAS,OAAIA,EAAY,KACzC,MAEF,IAAK,UACHP,GAAmB,SAAAO,GAAS,OAAIA,EAAY,KAC5C,MAEF,IAAK,MACHL,GAAe,SAAAK,GAAS,OAAIA,EAAY,KACxC,MAEF,QACE,aASF,cAAC,EAAD,CAASlC,MAAO,aAAhB,SACE,cAAC,EAAD,CACEK,KAAMmB,EACNlB,QAASoB,EACTnB,IAAKqB,EACLpB,MAAOsB,IACPrB,2BArCgC,WACtC,IAAI0B,EAAgBL,IACpB,OAAOK,EAAgBC,KAAKC,MAAOb,EAAeW,EAAiB,KAAO,EAmCxCG,UCrDtC,IAuBeC,EAvBS,SAAAC,GAEpBA,GACAA,aAAuBC,UAEvB,6BAAqBC,MACnB,YAMO,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,OACAC,EACI,EADJA,QAEAJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCXhBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5B,EAAD,MAEF6B,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,wBAAwB,QAAU,8B,kBCA1DD,EAAOC,QAAU,CAAC,QAAU,iCAAiC,OAAS,mC","file":"static/js/main.07d2ca8c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <div>\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './statistics.module.css';\nimport Notification from '../Notification/notification';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positiveFeedbackPercentage,\n}) => (\n  <>\n    {total ? (\n      <ul className={s.box}>\n        <li className={s.options}> Good:{good} </li>\n        <li className={s.options}> Neutral:{neutral} </li>\n        <li className={s.options}> Bad:{bad} </li>\n        <li className={s.options}> Total:{total} </li>\n        <li className={s.options}>\n          Positive feedback: {positiveFeedbackPercentage}%\n        </li>\n      </ul>\n    ) : (\n      <Notification message=\"No feedback given\" />\n    )}\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positiveFeedbackPercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './feedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div className={s.options}>\n    {options.map(option => (\n      <button\n        className={s.button}\n        type=\"button\"\n        data-feedback={option}\n        onClick={onLeaveFeedback}\n        key={option}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import { useState } from 'react';\nimport Section from './components/Section/section';\nimport Statistics from './components/Statistics/statistics';\nimport FeedbackOptions from './components/FeedbackOptions/feedbackOptions';\n\nconst options = ['good', 'bad', 'neutral'];\n\nexport default function App() {\n  const [goodFeedback, setGoodFeedback] = useState(0);\n  const [neutralFeedback, setNeutralFeedback] = useState(0);\n  const [badFeedback, setBadFeedback] = useState(0);\n\n  const countTotalFeedback = () => {\n    return goodFeedback + badFeedback + neutralFeedback;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let totalFeedback = countTotalFeedback();\n    return totalFeedback ? Math.round((goodFeedback / totalFeedback) * 100) : 0;\n  };\n\n  const handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n\n    switch (feedback) {\n      case 'good':\n        setGoodFeedback(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutralFeedback(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBadFeedback(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions options={options} onLeaveFeedback={handleFeedback} />\n      </Section>\n      <Section title={'Statistics'}>\n        <Statistics\n          good={goodFeedback}\n          neutral={neutralFeedback}\n          bad={badFeedback}\n          total={countTotalFeedback()}\n          positiveFeedbackPercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (\n    onPerfEntry &&\n    onPerfEntry instanceof Function\n  ) {\n    import('web-vitals').then(\n      ({\n        getCLS,\n        getFID,\n        getFCP,\n        getLCP,\n        getTTFB,\n      }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      },\n    );\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"statistics_box__3k3oh\",\"options\":\"statistics_options__3vKcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"feedbackOptions_options__11T2Q\",\"button\":\"feedbackOptions_button__18zGo\"};"],"sourceRoot":""}